#!/usr/bin/perl -w
use strict;
use Gnome2::VFS;

use Test::More tests => 1;

# $Header$

###############################################################################

Gnome2::VFS -> init();

###############################################################################

Gnome2::VFS::Async -> set_job_limit(3);
is(Gnome2::VFS::Async -> get_job_limit(), 3);

###############################################################################

my $callback_close = sub {
  my ($handle, $result) = @_;

  isa_ok($handle, "Gnome2::VFS::Async::Handle");
  is($result, "ok");

  $handle -> cancel();
};

my $callback_read = sub {
  my ($handle, $result, $buffer, $bytes_requested, $bytes_read) = @_;

  isa_ok($handle, "Gnome2::VFS::Async::Handle");
  is($result, "ok");

  ok(defined($buffer));
  ok($bytes_requested == $bytes_read);

  $handle -> close($callback_close);
};

my $callback_open = sub {
  my ($handle, $result) = @_;

  isa_ok($handle, "Gnome2::VFS::Async::Handle");
  is($result, "ok");

  $handle -> read(10, $callback_read);
};

###############################################################################

my $callback_create = sub {
  my ($handle, $result) = @_;

  isa_ok($handle, "Gnome2::VFS::Async::Handle");
  is($result, "ok");

  $handle -> close($callback_close);
};

###############################################################################

my $callback_directory_open = sub {
  my ($handle, $result, $infos, $entries_read) = @_;

  isa_ok($handle, "Gnome2::VFS::Async::Handle");

  if ($result eq "error-eof") {
    $handle -> cancel();
  }
  else {
    is($result, "ok");
    is($entries_read, 2);

    foreach (@{$infos}) {
      isa_ok($_, "Gnome2::VFS::FileInfo");
    }
  }
};

###############################################################################

foreach (Gnome2::VFS::Async -> open("/usr/bin/perl", qw(read), 0, $callback_open),
         Gnome2::VFS::Async -> open_uri(Gnome2::VFS::URI -> new("/usr/bin/perl"), qw(read), 0, $callback_open),
         Gnome2::VFS::Async -> create("/tmp/bla", [qw(read write)], 1, 0666, 0, $callback_create),
         Gnome2::VFS::Async -> create_uri(Gnome2::VFS::URI -> new("/tmp/ble"), [qw(read write)], 1, 0666, 0, $callback_create),
         Gnome2::VFS::Async -> create_symbolic_link(Gnome2::VFS::URI -> new("/tmp/bli"), "/usr/bin/perl", 0, $callback_create)) {
  isa_ok($_, "Gnome2::VFS::Async::Handle");
}

###############################################################################

Gnome2::VFS::Async -> load_directory("/tmp", qw(default), 2, 0, $callback_directory_open);
Gnome2::VFS::Async -> get_file_info([Gnome2::VFS::URI -> new("/tmp/bla"),
                                     Gnome2::VFS::URI -> new("/tmp/ble"),
                                     Gnome2::VFS::URI -> new("/tmp/bli")], qw(default), 0, sub { use Data::Dumper; print Dumper @_; });

###############################################################################

Glib::Timeout -> add(1000, sub {
  Gtk2 -> main_quit();

  Gnome2::VFS -> unlink("/tmp/bla");
  Gnome2::VFS -> unlink("/tmp/ble");
  Gnome2::VFS -> unlink("/tmp/bli");

  0;
});

Gtk2 -> main();

Gnome2::VFS -> shutdown();
